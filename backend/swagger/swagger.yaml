openapi: 3.0.0
info:
  title: API de Usuarios, Productos, Movimientos, Proveedores, Clientes, Pagos y Configuraciones
  version: 1.1.2

paths:
  # ------------------- USUARIOS -------------------
  /api/usuarios:
    get:
      summary: Lista todos los usuarios
      responses:
        '200':
          description: Lista de usuarios
    post:
      summary: Crear nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre: { type: string }
                email: { type: string }
                password: { type: string }
                rol: { type: string }
      responses:
        '201':
          description: Usuario creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  usuario:
                    type: object
                    properties:
                      id: { type: integer }
                      nombre: { type: string }
                      email: { type: string }
                      rol: { type: string }
                  token: { type: string }

  /api/usuarios/send-code:
    post:
      summary: Enviar código de verificación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
      responses:
        '200':
          description: Código enviado
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  offline: { type: boolean }
                  message: { type: string }

  /api/usuarios/verify-code:
    post:
      summary: Verificar código y registrar usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre: { type: string }
                email: { type: string }
                password: { type: string }
                rol: { type: string }
                code: { type: string }
      responses:
        '201':
          description: Usuario registrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  usuario:
                    type: object
                    properties:
                      id: { type: integer }
                      nombre: { type: string }
                      email: { type: string }
                      rol: { type: string }
                  token: { type: string }

  /api/usuarios/login/send-code:
    post:
      summary: Paso 1 - Enviar código de login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Código de login enviado
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  offline: { type: boolean }
                  message: { type: string }

  /api/usuarios/login/verify-code:
    post:
      summary: Paso 2 - Verificar código de login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                code: { type: string }
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  message: { type: string }
                  usuario:
                    type: object
                    properties:
                      id: { type: integer }
                      nombre: { type: string }
                      email: { type: string }
                      rol: { type: string }
                  token: { type: string }

  /api/usuarios/recovery/send-code:
    post:
      summary: Enviar código de recuperación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
      responses:
        '200':
          description: Código enviado
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  message: { type: string }

  /api/usuarios/recovery/verify-code:
    post:
      summary: Verificar código de recuperación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                code: { type: string }
      responses:
        '200':
          description: Código verificado
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  message: { type: string }

  /api/usuarios/recovery/reset-password:
    post:
      summary: Resetear contraseña
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                newPassword: { type: string }
      responses:
        '200':
          description: Contraseña actualizada
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  message: { type: string }
                  usuario:
                    type: object
                    properties:
                      id: { type: integer }
                      nombre: { type: string }
                      email: { type: string }
                      rol: { type: string }
                  token: { type: string }

  /api/usuarios/google-login:
    post:
      summary: Login con Google
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token: { type: string }
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  usuario:
                    type: object
                    properties:
                      id: { type: integer }
                      nombre: { type: string }
                      email: { type: string }
                      rol: { type: string }
                  token: { type: string }

  # ------------------- PRODUCTOS -------------------
  /api/productos:
    get:
      summary: Lista todos los productos
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: integer }
                    codigo: { type: string }
                    nombre: { type: string }
                    descripcion: { type: string }
                    categoria: { type: string }
                    unidad: { type: string }
                    stock_minimo: { type: integer }
                    stock_actual: { type: integer }
                    precio: { type: number }

    post:
      summary: Crear un nuevo producto (registro con movimiento de entrada)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
                - proveedor_id
                - responsable_id
              properties:
                codigo: { type: string }
                nombre: { type: string }
                descripcion: { type: string }
                categoria: { type: string }
                unidad: { type: string }
                stock_minimo: { type: integer }
                stock_actual: { type: integer }
                precio: { type: number }
                proveedor_id: { type: integer, description: 'ID de proveedor válido existente' }
                responsable_id: { type: integer, description: 'ID de usuario responsable que registra el producto' }
      responses:
        '201':
          description: Producto creado y movimiento inicial registrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  producto:
                    type: object
                    properties:
                      id: { type: integer }
                      codigo: { type: string }
                      nombre: { type: string }
                      descripcion: { type: string }
                      categoria: { type: string }
                      unidad: { type: string }
                      stock_minimo: { type: integer }
                      stock_actual: { type: integer }
                      precio: { type: number }

  /api/productos/{id}:
    put:
      summary: Actualizar producto por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                codigo: { type: string }
                nombre: { type: string }
                descripcion: { type: string }
                categoria: { type: string }
                unidad: { type: string }
                stock_minimo: { type: integer }
                stock_actual: { type: integer }
                precio: { type: number }
      responses:
        '200':
          description: Producto actualizado

    delete:
      summary: Eliminar producto por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Producto eliminado

  /api/productos/alertas:
    get:
      summary: Lista productos con stock bajo
      responses:
        '200':
          description: Lista de productos con alerta de stock bajo

  # ------------------- MOVIMIENTOS -------------------
  /api/movimientos:
    get:
      summary: Lista todos los movimientos
      responses:
        '200':
          description: Lista de movimientos
    post:
      summary: Registrar entrada o salida de producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tipo:
                  type: string
                  enum: [Entrada, Salida]
                producto_id: { type: integer }
                cantidad: { type: integer }
                referencia: { type: string }
                responsable_id: { type: integer }
                proveedor_id: { type: integer }  # solo si tipo=Entrada
                cliente_id: { type: integer }    # solo si tipo=Salida
      responses:
        '201':
          description: Movimiento registrado y stock actualizado

  # ------------------- PROVEEDORES -------------------
  /api/proveedores:
    get:
      summary: Lista todos los proveedores
      responses:
        '200':
          description: Lista de proveedores
    post:
      summary: Crear un proveedor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre: { type: string }
                telefono: { type: string }
                contacto: { type: string }
      responses:
        '201':
          description: Proveedor creado

  # ------------------- CLIENTES -------------------
  /api/clientes:
    get:
      summary: Lista todos los clientes
      responses:
        '200':
          description: Lista de clientes
    post:
      summary: Crear un cliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre: { type: string }
                telefono: { type: string }
                contacto: { type: string }
      responses:
        '201':
          description: Cliente creado

  # ------------------- PAGOS -------------------
  /api/pagos:
    post:
      summary: Crear PaymentIntent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usuarioId: { type: integer }
                carrito:
                  type: array
                  items:
                    type: object
                    properties:
                      nombre: { type: string }
                      precio: { type: string }
                      cantidad: { type: integer }
      responses:
        '200':
          description: PaymentIntent creado

  /api/pagos/confirmar:
    post:
      summary: Confirmar pago y enviar factura
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usuario:
                  type: object
                  properties:
                    id: { type: integer }
                    nombre: { type: string }
                    email: { type: string }
                carrito:
                  type: array
                  items:
                    type: object
                    properties:
                      nombre: { type: string }
                      precio: { type: string }
                      cantidad: { type: integer }
                paymentIntentId: { type: string }
      responses:
        '200':
          description: Pago confirmado y factura enviada

  # ------------------- CONFIGURACIONES -------------------
  /api/configuraciones:
    post:
      summary: Crear configuración para un usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usuario_id: { type: integer }
      responses:
        '201':
          description: Configuración creada

  /api/configuraciones/{usuario_id}:
    get:
      summary: Obtener configuración por usuario
      parameters:
        - name: usuario_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Configuración encontrada
    put:
      summary: Actualizar configuración completa de un usuario
      parameters:
        - name: usuario_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tema: { type: string }
                notificaciones: { type: boolean }
      responses:
        '200':
          description: Configuración actualizada
    patch:
      summary: Actualizar solo el tema
      parameters:
        - name: usuario_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tema: { type: string }
      responses:
        '200':
          description: Tema actualizado
